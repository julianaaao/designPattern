Observer Pattern :
-한 객체의 상태가 바뀌면 그 객체에 의존하는 다른 객체에게 연락이 가고, 자동으로 내용이 갱신되는 방식으로
일대다 (one-to-many) 의존성을 정의한다.
-한 객체의 상태가 변경되면 그 객체에 의존하는 모든 객체에 연락이 간다.

출판-구독(Publish-Subscribe) 패턴 :
비동기 메시징 패러다임.
발행자와 구독자가 있고, 그 사이에 브로커(=메시지 큐)가 존재하는 형태.
ref: https://gobae.tistory.com/122


Loose Coupling 느슨한 결합 :
객체들이 상호작용 할 수는 있지만, 서로를 잘 모르는 관계를 의미.
활용시 유연성이 아주 좋아짐.
옵저버 패턴 = 느슨한 결합의 훌륭한 예.

data push :
measurementChanged() 에서 notifyObservers() 호출
notifyObservers()에서 List에 등록된 Observer에 notify(update 메서드)를 보낸다.
Observer는 update 메서드를 통해 data를 받아 Display 객체들에서는 해당 data를 Display 특성에 맞게 display()한다.

data pull :
push는 subject 가 데이터를 push 하고 observer가 data를 가공하여 사용하는데,
이렇게 되면 불필요한 데이터도 모두 받고 사용하여야 한다.
따라서 확장성 측면으로 볼때는 data를 pull 하는 방법이 더 효율적.
observer는 subject에 등록과 삭제하기 위해 subject 객체를 가지므로 subject.getData()를 통해 데이터를 pull 해올 수 있다.


객체지향 원칙 :
- 바뀌는 부분은 캡슐화한다.
- 상속보다는 구성을 활용한다.
- 구현보다는 인터페이스에 맞춰서 프로그래밍한다.
+ 상호작용하는 객체 사이에서는 가능하면 느슨한 결합을 사용해야 한다.
